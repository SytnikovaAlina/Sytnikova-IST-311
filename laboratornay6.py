# -*- coding: utf-8 -*-
"""Laboratornay6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tx37W_2IktZ3Ma2p2vufFW8xjAkySk50
"""

import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression

celsius = [[-67.0], [-34.0], [0], [34.0], [54.0], [67.0], [100]]
fahrenheit = [[-88.6], [-29.2], [32.0], [93.2], [129.2], [152.6], [212.0]]

plt.figure(figsize=(15,8), dpi=50)
plt.scatter(celsius, fahrenheit, label='входные значения', color='green', marker='$f$');
plt.xlabel('celsius')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()

for c,f in zip(celsius, fahrenheit):
  print(f'целсия {c} фаренгейт {f}' )

"""--------------------------------------------------------------------------------"""

lr = LinearRegression()

lr.fit(celsius, fahrenheit)

lr.predict([[256], [123]])

lr.coef_

lr.intercept_

celsius_test = [[-50], [10], [30], [20], [10], [70], [87]]
fahrenheit_test= lr.predict(celsius_test)

fahrenheit_test

for c,f in zip(celsius_test, fahrenheit_test):
  print(f'целсия {c} фаренгейт {f}' )

import numpy as np

x_range = np.arange(-70,120)
y_range = x_range*1.8+32

plt.figure(figsize=(15,8), dpi=280)
plt.plot(x_range, y_range, linewidth=1,)
plt.scatter(celsius, fahrenheit, label='входные значения', color='green')
plt.scatter(celsius_test, fahrenheit_test, label='предсказанное значение', color='blue')
plt.xlabel('Цельсия')
plt.ylabel('Фаренгейта')
plt.legend()
plt.grid(True)
plt.show()

"""Самостоятельная работа

Номер 1
"""

fahrenheit = [[-88.6], [-29.2], [32.0], [93.2], [129.2], [152.6], [212.0]]
kelvin = [[206.15], [239.15], [273.15], [307.15], [327.15], [340.15], [373.15]]

plt.figure(figsize=(15,8), dpi=90)
plt.scatter( fahrenheit,kelvin, label='входные значения', color='blue', marker='$K$')
plt.xlabel('fahrenheit')
plt.ylabel('kelvin')
plt.legend()
plt.grid(True)
plt.show()

for f,k in zip(fahrenheit, kelvin ):
  print(f'фаренгейт {f} кельвина {k}' )

"""--------------------------------------------------------------------------------"""

lr.fit(fahrenheit, kelvin)
lr.predict([[256], [123]])
lr.coef_
lr.intercept_
fahrenheit_test = [ [-58. ], [ 50. ], [ 86. ], [ 68. ], [ 50. ], [158. ], [188.6] ]
kelvin_test = lr.predict(fahrenheit_test)
kelvin_test

for f,k in zip(fahrenheit_test, kelvin_test ):
  print(f'фаренгейт {f} кельвина {k}' )

x_range = np.arange(-100, 330)
y_range = (x_range+459.67)*5/9

plt.figure(figsize=(15,8), dpi=90)
plt.plot(x_range, y_range, linewidth=0.5,)
plt.scatter(fahrenheit, kelvin, label='входные значения', color='green')
plt.scatter(fahrenheit_test, kelvin_test, label='предсказанное значение', color='blue')
plt.xlabel('Фаренгейта')
plt.ylabel('Кельвина')
plt.legend()
plt.grid(True)
plt.show()

"""Номер 2

https://github.com/SytnikovaAlina/Sytnikova-IST-311.git

Номер 3

Диаграмма рассеяния
"""

from matplotlib import markers
x=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y=[5, 16, 1, 25, 2, 18, 30, 7, 28,19]

plt.scatter(x, y)
plt.show

"""Столбчатая диаграмма"""

x=['Июнь', 'Июль', 'Август','Сентябрь' , 'Октябрь', 'Ноябрь']
y=[27, 30, 31, 23, 15, 7]

plt.bar(x, y, label='ср.температура', color='green')
plt.xlabel('Месяц')
plt.ylabel('Температура')
plt.title('Ср. температура в Ростове')
plt.legend()
plt.grid(True)
plt.show()

"""Круговая диаграмма"""

labels=['Iphone', 'Samsung', 'Honor', 'Huawei', 'Nokia']
y=[15, 14, 22, 29, 5]

plt.pie(y, labels=labels, autopct='%1.1f%%')
plt.show

"""Номер 4"""

import math

e=math.e
pi=math.pi
nan=math.nan
f=math.factorial(16)
nod=math.gcd(16, 128)

print(f'e={e}, pi={pi}, nan={nan}, f={f}, nod={nod}')

"""Задания повышенной сложности

1
"""

plt.axes()
rectangle = plt.Rectangle((0,0), 10, 50, fc='grey',ec="black")
plt.gca().add_patch(rectangle)
plt.axis('scaled')

rectangle2 = plt.Rectangle((10,0), 10, 35, fc='grey',ec="black")
plt.gca().add_patch(rectangle2)
plt.axis('scaled')

rectangle = plt.Rectangle((20,0), 40, 30, fc='grey',ec="black")
plt.gca().add_patch(rectangle)
plt.axis('scaled')



rectangle2 = plt.Rectangle((60,0), 10, 35, fc='grey',ec="black")
plt.gca().add_patch(rectangle2)
plt.axis('scaled')

rectangle2 = plt.Rectangle((70,0), 10, 50, fc='grey',ec="black")
plt.gca().add_patch(rectangle2)
plt.axis('scaled')

rectangle2 = plt.Rectangle((25,30), 30, 10, fc='darkgrey',ec="black")
plt.gca().add_patch(rectangle2)
plt.axis('scaled')

rectangle2 = plt.Rectangle((35,0), 10, 10, fc='brown',ec="black")
plt.gca().add_patch(rectangle2)
plt.axis('scaled')

coord =[[10, 35], [20, 35], [15, 40]]
coord.append(coord[0])
xs, ys = zip(*coord)
plt.plot(xs,ys, color='brown')

coord =[[60, 35], [70, 35], [65, 40]]
coord.append(coord[0])
xs, ys = zip(*coord)
plt.plot(xs,ys, color='brown')

coord =[[25,40], [55, 40], [40, 45]]
coord.append(coord[0])
xs, ys = zip(*coord)
plt.plot(xs,ys, color='brown')

rectangle2 = plt.Rectangle((22,20), 3, 3, fc='black',ec="black")
plt.gca().add_patch(rectangle2)
plt.axis('scaled')

rectangle2 = plt.Rectangle((32,20), 3, 3, fc='black',ec="black")
plt.gca().add_patch(rectangle2)
plt.axis('scaled')

rectangle2 = plt.Rectangle((45,20), 3, 3, fc='black',ec="black")
plt.gca().add_patch(rectangle2)
plt.axis('scaled')

rectangle2 = plt.Rectangle((55,20), 3, 3, fc='black',ec="black")
plt.gca().add_patch(rectangle2)
plt.axis('scaled')
plt.show()